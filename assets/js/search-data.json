{
  
    
        "post0": {
            "title": "Data Analysis",
            "content": "from sklearn import preprocessing from sklearn.model_selection import GridSearchCV from sklearn.ensemble import RandomForestClassifier from sklearn.ensemble import RandomForestRegressor import pandas as pd import numpy as np import matplotlib.pyplot as plt import seaborn as sns import warnings warnings.filterwarnings(&#39;ignore&#39;) %matplotlib inline . train = pd.read_csv(&quot;input/titanic/train.csv&quot;) test = pd.read_csv(&quot;input/titanic/test.csv&quot;) . train.head(5) . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 1 | 0 | 3 | Braund, Mr. Owen Harris | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | . 1 2 | 1 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Th... | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | . 2 3 | 1 | 3 | Heikkinen, Miss. Laina | female | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | NaN | S | . 3 4 | 1 | 1 | Futrelle, Mrs. Jacques Heath (Lily May Peel) | female | 35.0 | 1 | 0 | 113803 | 53.1000 | C123 | S | . 4 5 | 0 | 3 | Allen, Mr. William Henry | male | 35.0 | 0 | 0 | 373450 | 8.0500 | NaN | S | . train.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 891 entries, 0 to 890 Data columns (total 12 columns): # Column Non-Null Count Dtype -- -- 0 PassengerId 891 non-null int64 1 Survived 891 non-null int64 2 Pclass 891 non-null int64 3 Name 891 non-null object 4 Sex 891 non-null object 5 Age 714 non-null float64 6 SibSp 891 non-null int64 7 Parch 891 non-null int64 8 Ticket 891 non-null object 9 Fare 891 non-null float64 10 Cabin 204 non-null object 11 Embarked 889 non-null object dtypes: float64(2), int64(5), object(5) memory usage: 83.7+ KB . test.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 418 entries, 0 to 417 Data columns (total 11 columns): # Column Non-Null Count Dtype -- -- 0 PassengerId 418 non-null int64 1 Pclass 418 non-null int64 2 Name 418 non-null object 3 Sex 418 non-null object 4 Age 332 non-null float64 5 SibSp 418 non-null int64 6 Parch 418 non-null int64 7 Ticket 418 non-null object 8 Fare 417 non-null float64 9 Cabin 91 non-null object 10 Embarked 418 non-null object dtypes: float64(2), int64(4), object(5) memory usage: 36.0+ KB . train.describe() . PassengerId Survived Pclass Age SibSp Parch Fare . count 891.000000 | 891.000000 | 891.000000 | 714.000000 | 891.000000 | 891.000000 | 891.000000 | . mean 446.000000 | 0.383838 | 2.308642 | 29.699118 | 0.523008 | 0.381594 | 32.204208 | . std 257.353842 | 0.486592 | 0.836071 | 14.526497 | 1.102743 | 0.806057 | 49.693429 | . min 1.000000 | 0.000000 | 1.000000 | 0.420000 | 0.000000 | 0.000000 | 0.000000 | . 25% 223.500000 | 0.000000 | 2.000000 | 20.125000 | 0.000000 | 0.000000 | 7.910400 | . 50% 446.000000 | 0.000000 | 3.000000 | 28.000000 | 0.000000 | 0.000000 | 14.454200 | . 75% 668.500000 | 1.000000 | 3.000000 | 38.000000 | 1.000000 | 0.000000 | 31.000000 | . max 891.000000 | 1.000000 | 3.000000 | 80.000000 | 8.000000 | 6.000000 | 512.329200 | . test.describe() . PassengerId Pclass Age SibSp Parch Fare . count 418.000000 | 418.000000 | 332.000000 | 418.000000 | 418.000000 | 417.000000 | . mean 1100.500000 | 2.265550 | 30.272590 | 0.447368 | 0.392344 | 35.627188 | . std 120.810458 | 0.841838 | 14.181209 | 0.896760 | 0.981429 | 55.907576 | . min 892.000000 | 1.000000 | 0.170000 | 0.000000 | 0.000000 | 0.000000 | . 25% 996.250000 | 1.000000 | 21.000000 | 0.000000 | 0.000000 | 7.895800 | . 50% 1100.500000 | 3.000000 | 27.000000 | 0.000000 | 0.000000 | 14.454200 | . 75% 1204.750000 | 3.000000 | 39.000000 | 1.000000 | 0.000000 | 31.500000 | . max 1309.000000 | 3.000000 | 76.000000 | 8.000000 | 9.000000 | 512.329200 | . data = train.append(test) data . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 1 | 0.0 | 3 | Braund, Mr. Owen Harris | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | . 1 2 | 1.0 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Th... | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | . 2 3 | 1.0 | 3 | Heikkinen, Miss. Laina | female | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | NaN | S | . 3 4 | 1.0 | 1 | Futrelle, Mrs. Jacques Heath (Lily May Peel) | female | 35.0 | 1 | 0 | 113803 | 53.1000 | C123 | S | . 4 5 | 0.0 | 3 | Allen, Mr. William Henry | male | 35.0 | 0 | 0 | 373450 | 8.0500 | NaN | S | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 413 1305 | NaN | 3 | Spector, Mr. Woolf | male | NaN | 0 | 0 | A.5. 3236 | 8.0500 | NaN | S | . 414 1306 | NaN | 1 | Oliva y Ocana, Dona. Fermina | female | 39.0 | 0 | 0 | PC 17758 | 108.9000 | C105 | C | . 415 1307 | NaN | 3 | Saether, Mr. Simon Sivertsen | male | 38.5 | 0 | 0 | SOTON/O.Q. 3101262 | 7.2500 | NaN | S | . 416 1308 | NaN | 3 | Ware, Mr. Frederick | male | NaN | 0 | 0 | 359309 | 8.0500 | NaN | S | . 417 1309 | NaN | 3 | Peter, Master. Michael J | male | NaN | 1 | 1 | 2668 | 22.3583 | NaN | C | . 1309 rows × 12 columns . data.reset_index(inplace=True, drop=True) data . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 1 | 0.0 | 3 | Braund, Mr. Owen Harris | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | . 1 2 | 1.0 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Th... | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | . 2 3 | 1.0 | 3 | Heikkinen, Miss. Laina | female | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | NaN | S | . 3 4 | 1.0 | 1 | Futrelle, Mrs. Jacques Heath (Lily May Peel) | female | 35.0 | 1 | 0 | 113803 | 53.1000 | C123 | S | . 4 5 | 0.0 | 3 | Allen, Mr. William Henry | male | 35.0 | 0 | 0 | 373450 | 8.0500 | NaN | S | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 1304 1305 | NaN | 3 | Spector, Mr. Woolf | male | NaN | 0 | 0 | A.5. 3236 | 8.0500 | NaN | S | . 1305 1306 | NaN | 1 | Oliva y Ocana, Dona. Fermina | female | 39.0 | 0 | 0 | PC 17758 | 108.9000 | C105 | C | . 1306 1307 | NaN | 3 | Saether, Mr. Simon Sivertsen | male | 38.5 | 0 | 0 | SOTON/O.Q. 3101262 | 7.2500 | NaN | S | . 1307 1308 | NaN | 3 | Ware, Mr. Frederick | male | NaN | 0 | 0 | 359309 | 8.0500 | NaN | S | . 1308 1309 | NaN | 3 | Peter, Master. Michael J | male | NaN | 1 | 1 | 2668 | 22.3583 | NaN | C | . 1309 rows × 12 columns . sns.countplot(data[&#39;Survived&#39;]) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x15ba41a9fc8&gt; . sns.countplot(data[&#39;Pclass&#39;], hue=data[&#39;Survived&#39;]) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x15ba4d25e08&gt; . sns.countplot(data[&#39;Sex&#39;], hue=data[&#39;Survived&#39;]) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x15ba4db8288&gt; . sns.countplot(data[&#39;Embarked&#39;], hue=data[&#39;Survived&#39;]) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x15ba4e21588&gt; . g = sns.FacetGrid(data, col=&#39;Survived&#39;) g.map(sns.distplot, &#39;Age&#39;, kde=False) . &lt;seaborn.axisgrid.FacetGrid at 0x15ba4ea5ec8&gt; . g = sns.FacetGrid(data, col=&#39;Survived&#39;) g.map(sns.distplot, &#39;Fare&#39;, kde=False) . &lt;seaborn.axisgrid.FacetGrid at 0x15ba4fd7748&gt; . g = sns.FacetGrid(data, col=&#39;Survived&#39;) g.map(sns.distplot, &#39;Parch&#39;, kde=False) . &lt;seaborn.axisgrid.FacetGrid at 0x15ba51a1408&gt; . g = sns.FacetGrid(data, col=&#39;Survived&#39;) g.map(sns.distplot, &#39;SibSp&#39;, kde=False) . &lt;seaborn.axisgrid.FacetGrid at 0x15ba52b0808&gt; . data[&#39;Family_Size&#39;] = data[&#39;Parch&#39;] + data[&#39;SibSp&#39;] . g = sns.FacetGrid(data, col=&#39;Survived&#39;) g.map(sns.distplot, &#39;Family_Size&#39;, kde=False) . &lt;seaborn.axisgrid.FacetGrid at 0x15ba54245c8&gt; . Feature Engineering . data[&#39;Title1&#39;] = data[&#39;Name&#39;].str.split(&quot;, &quot;, expand=True)[1] . data[&#39;Name&#39;].str.split(&quot;, &quot;, expand=True).head(3) . 0 1 . 0 Braund | Mr. Owen Harris | . 1 Cumings | Mrs. John Bradley (Florence Briggs Thayer) | . 2 Heikkinen | Miss. Laina | . data[&#39;Title1&#39;].head(3) . 0 Mr. Owen Harris 1 Mrs. John Bradley (Florence Briggs Thayer) 2 Miss. Laina Name: Title1, dtype: object . data[&#39;Title1&#39;] = data[&#39;Title1&#39;].str.split(&quot;.&quot;, expand=True)[0] . data[&#39;Title1&#39;].head(3) . 0 Mr 1 Mrs 2 Miss Name: Title1, dtype: object . data[&#39;Title1&#39;].unique() . array([&#39;Mr&#39;, &#39;Mrs&#39;, &#39;Miss&#39;, &#39;Master&#39;, &#39;Don&#39;, &#39;Rev&#39;, &#39;Dr&#39;, &#39;Mme&#39;, &#39;Ms&#39;, &#39;Major&#39;, &#39;Lady&#39;, &#39;Sir&#39;, &#39;Mlle&#39;, &#39;Col&#39;, &#39;Capt&#39;, &#39;the Countess&#39;, &#39;Jonkheer&#39;, &#39;Dona&#39;], dtype=object) . pd.crosstab(data[&#39;Title1&#39;],data[&#39;Sex&#39;]).T.style.background_gradient(cmap=&#39;summer_r&#39;) . Title1 Capt Col Don Dona Dr Jonkheer Lady Major Master Miss Mlle Mme Mr Mrs Ms Rev Sir the Countess . Sex . female 0 | 0 | 0 | 1 | 1 | 0 | 1 | 0 | 0 | 260 | 2 | 1 | 0 | 197 | 2 | 0 | 0 | 1 | . male 1 | 4 | 1 | 0 | 7 | 1 | 0 | 2 | 61 | 0 | 0 | 0 | 757 | 0 | 0 | 8 | 1 | 0 | . pd.crosstab(data[&#39;Title1&#39;],data[&#39;Survived&#39;]).T.style.background_gradient(cmap=&#39;summer_r&#39;) . Title1 Capt Col Don Dr Jonkheer Lady Major Master Miss Mlle Mme Mr Mrs Ms Rev Sir the Countess . Survived . 0.0 1 | 1 | 1 | 4 | 1 | 0 | 1 | 17 | 55 | 0 | 0 | 436 | 26 | 0 | 6 | 0 | 0 | . 1.0 0 | 1 | 0 | 3 | 0 | 1 | 1 | 23 | 127 | 2 | 1 | 81 | 99 | 1 | 0 | 1 | 1 | . data.groupby([&#39;Title1&#39;])[&#39;Age&#39;].mean() . Title1 Capt 70.000000 Col 54.000000 Don 40.000000 Dona 39.000000 Dr 43.571429 Jonkheer 38.000000 Lady 48.000000 Major 48.500000 Master 5.482642 Miss 21.774238 Mlle 24.000000 Mme 24.000000 Mr 32.252151 Mrs 36.994118 Ms 28.000000 Rev 41.250000 Sir 49.000000 the Countess 33.000000 Name: Age, dtype: float64 . data.groupby([&#39;Title1&#39;,&#39;Pclass&#39;])[&#39;Age&#39;].mean() . Title1 Pclass Capt 1 70.000000 Col 1 54.000000 Don 1 40.000000 Dona 1 39.000000 Dr 1 45.600000 2 38.500000 Jonkheer 1 38.000000 Lady 1 48.000000 Major 1 48.500000 Master 1 6.984000 2 2.757273 3 6.090000 Miss 1 30.338983 2 20.717083 3 17.360874 Mlle 1 24.000000 Mme 1 24.000000 Mr 1 41.450758 2 32.346715 3 28.318910 Mrs 1 43.208955 2 33.518519 3 32.326531 Ms 2 28.000000 3 NaN Rev 2 41.250000 Sir 1 49.000000 the Countess 1 33.000000 Name: Age, dtype: float64 . data[&#39;Title2&#39;] = data[&#39;Title1&#39;].replace([&#39;Mlle&#39;,&#39;Mme&#39;,&#39;Ms&#39;,&#39;Dr&#39;,&#39;Major&#39;,&#39;Lady&#39;,&#39;the Countess&#39;,&#39;Jonkheer&#39;,&#39;Col&#39;,&#39;Rev&#39;,&#39;Capt&#39;,&#39;Don&#39;,&#39;Sir&#39;,&#39;Dona&#39;], [&#39;Miss&#39;,&#39;Mrs&#39;,&#39;Miss&#39;,&#39;Mr&#39;,&#39;Mr&#39;,&#39;Mrs&#39;,&#39;Mrs&#39;,&#39;Mr&#39;,&#39;Mr&#39;,&#39;Mr&#39;,&#39;Mr&#39;,&#39;Mr&#39;,&#39;Mr&#39;,&#39;Mrs&#39;]) . data[&#39;Title2&#39;].unique() . array([&#39;Mr&#39;, &#39;Mrs&#39;, &#39;Miss&#39;, &#39;Master&#39;], dtype=object) . pd.crosstab(data[&#39;Title2&#39;],data[&#39;Sex&#39;]).T.style.background_gradient(cmap=&#39;summer_r&#39;) . Title2 Master Miss Mr Mrs . Sex . female 0 | 264 | 1 | 201 | . male 61 | 0 | 782 | 0 | . pd.crosstab(data[&#39;Title2&#39;],data[&#39;Survived&#39;]).T.style.background_gradient(cmap=&#39;summer_r&#39;) . Title2 Master Miss Mr Mrs . Survived . 0.0 17 | 55 | 451 | 26 | . 1.0 23 | 130 | 87 | 102 | . list(data.groupby([&#39;Title2&#39;,&#39;Pclass&#39;])[&#39;Age&#39;].mean().iteritems())[:3] . [((&#39;Master&#39;, 1), 6.984), ((&#39;Master&#39;, 2), 2.7572727272727273), ((&#39;Master&#39;, 3), 6.090000000000001)] . data.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 1309 entries, 0 to 1308 Data columns (total 15 columns): # Column Non-Null Count Dtype -- -- 0 PassengerId 1309 non-null int64 1 Survived 891 non-null float64 2 Pclass 1309 non-null int64 3 Name 1309 non-null object 4 Sex 1309 non-null object 5 Age 1046 non-null float64 6 SibSp 1309 non-null int64 7 Parch 1309 non-null int64 8 Ticket 1309 non-null object 9 Fare 1308 non-null float64 10 Cabin 295 non-null object 11 Embarked 1307 non-null object 12 Family_Size 1309 non-null int64 13 Title1 1309 non-null object 14 Title2 1309 non-null object dtypes: float64(3), int64(5), object(7) memory usage: 153.5+ KB . data[&#39;Ticket&#39;] . 0 A/5 21171 1 PC 17599 2 STON/O2. 3101282 3 113803 4 373450 ... 1304 A.5. 3236 1305 PC 17758 1306 SOTON/O.Q. 3101262 1307 359309 1308 2668 Name: Ticket, Length: 1309, dtype: object . data[&#39;Ticket_info&#39;] = data[&#39;Ticket&#39;].apply(lambda x : x.replace(&quot;.&quot;,&quot;&quot;).replace(&quot;/&quot;,&quot;&quot;).strip().split(&#39; &#39;)[0] if not x.isdigit() else &#39;X&#39;) . data[&#39;Ticket_info&#39;].unique() . array([&#39;A5&#39;, &#39;PC&#39;, &#39;STONO2&#39;, &#39;X&#39;, &#39;PP&#39;, &#39;CA&#39;, &#39;SCParis&#39;, &#39;SCA4&#39;, &#39;A4&#39;, &#39;SP&#39;, &#39;SOC&#39;, &#39;WC&#39;, &#39;SOTONOQ&#39;, &#39;WEP&#39;, &#39;STONO&#39;, &#39;C&#39;, &#39;SCPARIS&#39;, &#39;SOP&#39;, &#39;Fa&#39;, &#39;LINE&#39;, &#39;FCC&#39;, &#39;SWPP&#39;, &#39;SCOW&#39;, &#39;PPP&#39;, &#39;SC&#39;, &#39;SCAH&#39;, &#39;AS&#39;, &#39;SOPP&#39;, &#39;FC&#39;, &#39;SOTONO2&#39;, &#39;CASOTON&#39;, &#39;SCA3&#39;, &#39;STONOQ&#39;, &#39;AQ4&#39;, &#39;A&#39;, &#39;LP&#39;, &#39;AQ3&#39;], dtype=object) . plt.figure(figsize=(18, 6)) sns.countplot(data[&#39;Ticket_info&#39;], hue=data[&#39;Survived&#39;]) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x15ba57748c8&gt; . Missing Value-embarked, Fare, Age . data.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 1309 entries, 0 to 1308 Data columns (total 16 columns): # Column Non-Null Count Dtype -- -- 0 PassengerId 1309 non-null int64 1 Survived 891 non-null float64 2 Pclass 1309 non-null int64 3 Name 1309 non-null object 4 Sex 1309 non-null object 5 Age 1046 non-null float64 6 SibSp 1309 non-null int64 7 Parch 1309 non-null int64 8 Ticket 1309 non-null object 9 Fare 1308 non-null float64 10 Cabin 295 non-null object 11 Embarked 1307 non-null object 12 Family_Size 1309 non-null int64 13 Title1 1309 non-null object 14 Title2 1309 non-null object 15 Ticket_info 1309 non-null object dtypes: float64(3), int64(5), object(8) memory usage: 163.8+ KB . sns.countplot(data[&#39;Embarked&#39;], hue=data[&#39;Survived&#39;]) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x15ba58daa88&gt; . data[&#39;Embarked&#39;] = data[&#39;Embarked&#39;].fillna(&#39;S&#39;) . data.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 1309 entries, 0 to 1308 Data columns (total 16 columns): # Column Non-Null Count Dtype -- -- 0 PassengerId 1309 non-null int64 1 Survived 891 non-null float64 2 Pclass 1309 non-null int64 3 Name 1309 non-null object 4 Sex 1309 non-null object 5 Age 1046 non-null float64 6 SibSp 1309 non-null int64 7 Parch 1309 non-null int64 8 Ticket 1309 non-null object 9 Fare 1308 non-null float64 10 Cabin 295 non-null object 11 Embarked 1309 non-null object 12 Family_Size 1309 non-null int64 13 Title1 1309 non-null object 14 Title2 1309 non-null object 15 Ticket_info 1309 non-null object dtypes: float64(3), int64(5), object(8) memory usage: 163.8+ KB . data[&#39;Ticket_group&#39;] = data.groupby([&#39;Ticket&#39;]).PassengerId.transform(&#39;count&#39;) data[&#39;Cabin_group&#39;] = data.groupby([&#39;Cabin&#39;]).PassengerId.transform(&#39;count&#39;) data[&#39;Cabin_group&#39;] = data[&#39;Cabin_group&#39;].fillna(0) data = data.astype({&quot;Cabin_group&quot;: int, &quot;Ticket_group&quot;: int}) data.head(10) data[&#39;Fare&#39;] = data[&#39;Fare&#39;].fillna(data[&#39;Fare&#39;].mean()) data[&#39;Fare_single&#39;] = data[&#39;Fare&#39;] / data[&#39;Ticket_group&#39;] . data.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 1309 entries, 0 to 1308 Data columns (total 19 columns): # Column Non-Null Count Dtype -- -- 0 PassengerId 1309 non-null int64 1 Survived 891 non-null float64 2 Pclass 1309 non-null int64 3 Name 1309 non-null object 4 Sex 1309 non-null object 5 Age 1046 non-null float64 6 SibSp 1309 non-null int64 7 Parch 1309 non-null int64 8 Ticket 1309 non-null object 9 Fare 1309 non-null float64 10 Cabin 295 non-null object 11 Embarked 1309 non-null object 12 Family_Size 1309 non-null int64 13 Title1 1309 non-null object 14 Title2 1309 non-null object 15 Ticket_info 1309 non-null object 16 Ticket_group 1309 non-null int32 17 Cabin_group 1309 non-null int32 18 Fare_single 1309 non-null float64 dtypes: float64(4), int32(2), int64(5), object(8) memory usage: 184.2+ KB . data[&#39;Cabin&#39;] . 0 NaN 1 C85 2 NaN 3 C123 4 NaN ... 1304 NaN 1305 C105 1306 NaN 1307 NaN 1308 NaN Name: Cabin, Length: 1309, dtype: object . data[&#39;Cabin&#39;] = data[&#39;Cabin&#39;].apply(lambda x : str(x)[0] if not pd.isnull(x) else &#39;NoCabin&#39;) . data[&#39;Cabin&#39;].unique() . array([&#39;NoCabin&#39;, &#39;C&#39;, &#39;E&#39;, &#39;G&#39;, &#39;D&#39;, &#39;A&#39;, &#39;B&#39;, &#39;F&#39;, &#39;T&#39;], dtype=object) . sns.countplot(data[&#39;Cabin&#39;], hue=data[&#39;Survived&#39;]) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x15ba59352c8&gt; . data[&#39;Embarked&#39;] . 0 S 1 C 2 S 3 S 4 S .. 1304 S 1305 C 1306 S 1307 S 1308 C Name: Embarked, Length: 1309, dtype: object . def newgender (cols): Sex=cols[0] Age=cols[1] if Age &lt; 5: return &#39;kid&#39; elif Age &lt; 15: return &#39;teenage&#39; else: return Sex . data[&#39;Gender&#39;] = data[[&#39;Sex&#39;,&#39;Age&#39;]].apply(newgender, axis=1) . data[&#39;Sex&#39;] = data[&#39;Sex&#39;].astype(&#39;category&#39;).cat.codes data[&#39;Gender&#39;] = data[&#39;Gender&#39;].astype(&#39;category&#39;).cat.codes data[&#39;Embarked&#39;] = data[&#39;Embarked&#39;].astype(&#39;category&#39;).cat.codes data[&#39;Pclass&#39;] = data[&#39;Pclass&#39;].astype(&#39;category&#39;).cat.codes data[&#39;Title1&#39;] = data[&#39;Title1&#39;].astype(&#39;category&#39;).cat.codes data[&#39;Title2&#39;] = data[&#39;Title2&#39;].astype(&#39;category&#39;).cat.codes data[&#39;Cabin&#39;] = data[&#39;Cabin&#39;].astype(&#39;category&#39;).cat.codes data[&#39;Ticket_info&#39;] = data[&#39;Ticket_info&#39;].astype(&#39;category&#39;).cat.codes . dataAgeNull = data[data[&quot;Age&quot;].isnull()] dataAgeNotNull = data[data[&quot;Age&quot;].notnull()] remove_outlier = dataAgeNotNull[(np.abs(dataAgeNotNull[&quot;Fare&quot;]-dataAgeNotNull[&quot;Fare&quot;].mean())&gt;(4*dataAgeNotNull[&quot;Fare&quot;].std()))| (np.abs(dataAgeNotNull[&quot;Family_Size&quot;]-dataAgeNotNull[&quot;Family_Size&quot;].mean())&gt;(4*dataAgeNotNull[&quot;Family_Size&quot;].std())) ] rfModel_age = RandomForestRegressor(n_estimators=2000,random_state=42) ageColumns = [&#39;Embarked&#39;, &#39;Fare&#39;, &#39;Pclass&#39;, &#39;Sex&#39;, &#39;Family_Size&#39;, &#39;Title1&#39;, &#39;Title2&#39;,&#39;Cabin&#39;,&#39;Ticket_info&#39;] rfModel_age.fit(remove_outlier[ageColumns], remove_outlier[&quot;Age&quot;]) ageNullValues = rfModel_age.predict(X= dataAgeNull[ageColumns]) dataAgeNull.loc[:,&quot;Age&quot;] = ageNullValues data = dataAgeNull.append(dataAgeNotNull) data.reset_index(inplace=True, drop=True) . data[&#39;Embarked&#39;] . 0 1 1 2 2 0 3 0 4 1 .. 1304 2 1305 1 1306 2 1307 0 1308 2 Name: Embarked, Length: 1309, dtype: int8 . data.info(0) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 1309 entries, 0 to 1308 Data columns (total 20 columns): # Column Non-Null Count Dtype -- -- 0 PassengerId 1309 non-null int64 1 Survived 891 non-null float64 2 Pclass 1309 non-null int8 3 Name 1309 non-null object 4 Sex 1309 non-null int8 5 Age 1309 non-null float64 6 SibSp 1309 non-null int64 7 Parch 1309 non-null int64 8 Ticket 1309 non-null object 9 Fare 1309 non-null float64 10 Cabin 1309 non-null int8 11 Embarked 1309 non-null int8 12 Family_Size 1309 non-null int64 13 Title1 1309 non-null int8 14 Title2 1309 non-null int8 15 Ticket_info 1309 non-null int8 16 Ticket_group 1309 non-null int32 17 Cabin_group 1309 non-null int32 18 Fare_single 1309 non-null float64 19 Gender 1309 non-null int8 dtypes: float64(4), int32(2), int64(4), int8(8), object(2) memory usage: 122.8+ KB . dataTrain = data[pd.notnull(data[&#39;Survived&#39;])].sort_values(by=[&#39;PassengerId&#39;]) dataTest = data[-pd.notnull(data[&#39;Survived&#39;])].sort_values(by=[&#39;PassengerId&#39;]) . dataTrain.columns . Index([&#39;PassengerId&#39;, &#39;Survived&#39;, &#39;Pclass&#39;, &#39;Name&#39;, &#39;Sex&#39;, &#39;Age&#39;, &#39;SibSp&#39;, &#39;Parch&#39;, &#39;Ticket&#39;, &#39;Fare&#39;, &#39;Cabin&#39;, &#39;Embarked&#39;, &#39;Family_Size&#39;, &#39;Title1&#39;, &#39;Title2&#39;, &#39;Ticket_info&#39;, &#39;Ticket_group&#39;, &#39;Cabin_group&#39;, &#39;Fare_single&#39;, &#39;Gender&#39;], dtype=&#39;object&#39;) . dataTrain = dataTrain[[&#39;Survived&#39;,&#39;Age&#39;,&#39;Embarked&#39;,&#39;Fare&#39;,&#39;Pclass&#39;,&#39;Gender&#39;,&#39;Family_Size&#39;,&#39;Title2&#39;,&#39;Ticket_info&#39;,&#39;Cabin&#39;,&#39;Ticket_group&#39;,&#39;Cabin_group&#39;]] dataTest = dataTest[[&#39;Age&#39;,&#39;Embarked&#39;,&#39;Fare&#39;,&#39;Pclass&#39;,&#39;Gender&#39;,&#39;Family_Size&#39;,&#39;Title2&#39;,&#39;Ticket_info&#39;,&#39;Cabin&#39;,&#39;Ticket_group&#39;,&#39;Cabin_group&#39;]] . dataTrain . Survived Age Embarked Fare Pclass Gender Family_Size Title2 Ticket_info Cabin Ticket_group Cabin_group . 263 0.0 | 22.000000 | 2 | 7.2500 | 2 | 2 | 1 | 2 | 2 | 7 | 1 | 0 | . 264 1.0 | 38.000000 | 0 | 71.2833 | 0 | 0 | 1 | 3 | 14 | 2 | 2 | 2 | . 265 1.0 | 26.000000 | 2 | 7.9250 | 2 | 0 | 0 | 1 | 31 | 7 | 1 | 0 | . 266 1.0 | 35.000000 | 2 | 53.1000 | 0 | 0 | 1 | 3 | 36 | 2 | 2 | 2 | . 267 0.0 | 35.000000 | 2 | 8.0500 | 2 | 2 | 0 | 2 | 36 | 7 | 1 | 0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 973 0.0 | 27.000000 | 2 | 13.0000 | 1 | 2 | 0 | 2 | 36 | 7 | 1 | 0 | . 974 1.0 | 19.000000 | 2 | 30.0000 | 0 | 0 | 0 | 1 | 36 | 1 | 1 | 1 | . 176 0.0 | 19.099409 | 2 | 23.4500 | 2 | 0 | 3 | 1 | 34 | 7 | 4 | 0 | . 975 1.0 | 26.000000 | 0 | 30.0000 | 0 | 2 | 0 | 2 | 36 | 2 | 1 | 1 | . 976 0.0 | 32.000000 | 1 | 7.7500 | 2 | 2 | 0 | 2 | 36 | 7 | 1 | 0 | . 891 rows × 12 columns . rf = RandomForestClassifier(criterion=&#39;gini&#39;, n_estimators=1000, min_samples_split=12, min_samples_leaf=1, oob_score=True, random_state=1, n_jobs=-1) rf.fit(dataTrain.iloc[:, 1:], dataTrain.iloc[:, 0]) print(&quot;%.4f&quot; % rf.oob_score_) . 0.8238 . pd.concat((pd.DataFrame(dataTrain.iloc[:, 1:].columns, columns = [&#39;variable&#39;]), pd.DataFrame(rf.feature_importances_, columns = [&#39;importance&#39;])), axis = 1).sort_values(by=&#39;importance&#39;, ascending = False)[:20] . variable importance . 4 Gender | 0.267469 | . 6 Title2 | 0.147266 | . 2 Fare | 0.136413 | . 0 Age | 0.117836 | . 3 Pclass | 0.072512 | . 9 Ticket_group | 0.061576 | . 5 Family_Size | 0.051228 | . 8 Cabin | 0.049502 | . 10 Cabin_group | 0.042906 | . 7 Ticket_info | 0.029274 | . 1 Embarked | 0.024018 | . Submit . submit = pd.read_csv(&#39;input/titanic/gender_submission.csv&#39;) rf_res = rf.predict(dataTest) submit[&#39;Survived&#39;] = rf_res submit[&#39;Survived&#39;] = submit[&#39;Survived&#39;].astype(int) submit.to_csv(&#39;submit.csv&#39;, index=False) . submit . PassengerId Survived . 0 892 | 0 | . 1 893 | 1 | . 2 894 | 0 | . 3 895 | 0 | . 4 896 | 1 | . ... ... | ... | . 413 1305 | 0 | . 414 1306 | 1 | . 415 1307 | 0 | . 416 1308 | 0 | . 417 1309 | 1 | . 418 rows × 2 columns .",
            "url": "https://simonwcc.github.io/AI-Journey/2021/06/25/Titanic.html",
            "relUrl": "/2021/06/25/Titanic.html",
            "date": " • Jun 25, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://simonwcc.github.io/AI-Journey/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://simonwcc.github.io/AI-Journey/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://simonwcc.github.io/AI-Journey/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://simonwcc.github.io/AI-Journey/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}